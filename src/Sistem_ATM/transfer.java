/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Sistem_ATM;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author alyag
 */
public class transfer extends javax.swing.JFrame {

    /**
     * Creates new form transfer
     */
    private String noRekeningPengirim = login.MainApp.akunLogin;

    public transfer() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldJumlahTransfer = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabelSaldoSaatIni = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldNoRekTujuan = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Transfer");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(jLabel1)
                .addContainerGap(351, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 102));
        jLabel6.setText("Masukkan Nominal");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, -1));

        jTextFieldJumlahTransfer.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 102)));
        jPanel1.add(jTextFieldJumlahTransfer, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 370, 30));

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 51));
        jButton1.setText("Transfer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, 370, 80));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setText("Saldo Anda saat ini adalah");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 460, 190, -1));

        jLabelSaldoSaatIni.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelSaldoSaatIni.setForeground(new java.awt.Color(0, 51, 102));
        jLabelSaldoSaatIni.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSaldoSaatIni.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 51, 102)));
        jPanel1.add(jLabelSaldoSaatIni, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 490, 340, 80));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setText("Masukkan No Rekening Tujuan");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, -1));

        jTextFieldNoRekTujuan.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 102)));
        jPanel1.add(jTextFieldNoRekTujuan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 370, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/smartphone.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, -1, -1));

        jButton2.setBackground(new java.awt.Color(0, 51, 102));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/arrow.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 620, 80, 50));

        jButton3.setBackground(new java.awt.Color(255, 204, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 0, 0));
        jButton3.setText("Check");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 370, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Sistem_ATM.menu_ATM frame = new Sistem_ATM.menu_ATM();
        frame.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String noRekening = jTextFieldNoRekTujuan.getText();

        // Validasi input
        if (noRekening.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nomor rekening harus diisi!.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String sql = "SELECT nama_lengkap FROM user WHERE nomor_rekening = ?";

        Connection con1 = null;  // Koneksi ke database
        PreparedStatement pstmt = null;  // PreparedStatement untuk query
        ResultSet rs = null;  // ResultSet untuk mengambil data

        try {
            // Membuat koneksi ke database menggunakan DriverManager
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_bank", "root", "");

            pstmt = con1.prepareStatement(sql);
            pstmt.setString(1, noRekening);  // Set nomor rekening sebagai parameter

            rs = pstmt.executeQuery();

            if (rs.next()) {
                String nama = rs.getString("nama_lengkap");  // Ambil nama dari database

                // Tampilkan nama pada label
                JOptionPane.showMessageDialog(this, "Nama yang terdaftar: " + nama, "Informasi", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Nomor rekening tidak ditemukan.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengecek data.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            // Pastikan koneksi dan resource lainnya ditutup setelah digunakan
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (con1 != null) {
                    con1.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private boolean transferUang(String noRekeningPengirim, String noRekeningTujuan, double jumlahTransfer) {
        boolean transferBerhasil = false;

        // SQL Queries
        String sqlGetSaldo = "SELECT saldo FROM user WHERE nomor_rekening = ?";
        String sqlUpdateSaldoPengirim = "UPDATE user SET saldo = saldo - ? WHERE nomor_rekening = ?";
        String sqlUpdateSaldoPenerima = "UPDATE user SET saldo = saldo + ? WHERE nomor_rekening = ?";
        String sqlInsertMutasiPengirim = "INSERT INTO mutasi (nomor_rekening_pengirim, nomor_rekening_tujuan, saldo_awal, saldo_akhir, status, tanggal) VALUES (?, ?, ?, ?, ?, NOW())";
        String sqlInsertMutasiPenerima = "INSERT INTO mutasi (nomor_rekening_pengirim, nomor_rekening_tujuan, saldo_awal, saldo_akhir, status, tanggal) VALUES (?, ?, ?, ?, ?, NOW())";

        // Variabel koneksi dan PreparedStatement lokal
        Connection con1 = null;
        PreparedStatement pstmtPengirim = null, pstmtPenerima = null;
        PreparedStatement pstmtUpdateSaldoPengirim = null, pstmtUpdateSaldoPenerima = null;
        PreparedStatement pstmtInsertMutasiPengirim = null, pstmtInsertMutasiPenerima = null;
        ResultSet rsPengirim = null, rsPenerima = null;

        try {
            // Membuat koneksi ke database
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_bank", "root", "");

            // Matikan auto-commit untuk transaksi
            con1.setAutoCommit(false);

            // Validasi rekening pengirim
            pstmtPengirim = con1.prepareStatement(sqlGetSaldo);
            pstmtPengirim.setString(1, noRekeningPengirim);
            rsPengirim = pstmtPengirim.executeQuery();
            if (!rsPengirim.next()) {
                JOptionPane.showMessageDialog(this, "Nomor rekening pengirim tidak ditemukan.");
                return false;
            }

            double saldoPengirim = rsPengirim.getDouble("saldo");

            // Validasi saldo
            if (saldoPengirim < jumlahTransfer) {
                JOptionPane.showMessageDialog(this, "Saldo tidak cukup untuk transfer.");
                return false;
            }

            // Validasi rekening penerima
            pstmtPenerima = con1.prepareStatement(sqlGetSaldo);
            pstmtPenerima.setString(1, noRekeningTujuan);
            rsPenerima = pstmtPenerima.executeQuery();
            if (!rsPenerima.next()) {
                JOptionPane.showMessageDialog(this, "Nomor rekening penerima tidak ditemukan.");
                return false;
            }

            // Update saldo pengirim
            pstmtUpdateSaldoPengirim = con1.prepareStatement(sqlUpdateSaldoPengirim);
            pstmtUpdateSaldoPengirim.setDouble(1, jumlahTransfer);
            pstmtUpdateSaldoPengirim.setString(2, noRekeningPengirim);
            pstmtUpdateSaldoPengirim.executeUpdate();

            // Update saldo penerima
            pstmtUpdateSaldoPenerima = con1.prepareStatement(sqlUpdateSaldoPenerima);
            pstmtUpdateSaldoPenerima.setDouble(1, jumlahTransfer);
            pstmtUpdateSaldoPenerima.setString(2, noRekeningTujuan);
            pstmtUpdateSaldoPenerima.executeUpdate();

            // Simpan mutasi untuk pengirim
            pstmtInsertMutasiPengirim = con1.prepareStatement(sqlInsertMutasiPengirim);
            pstmtInsertMutasiPengirim.setString(1, noRekeningPengirim);
            pstmtInsertMutasiPengirim.setString(2, noRekeningTujuan);
            pstmtInsertMutasiPengirim.setDouble(3, saldoPengirim);
            pstmtInsertMutasiPengirim.setDouble(4, saldoPengirim - jumlahTransfer);
            pstmtInsertMutasiPengirim.setString(5, "Transfer");
            pstmtInsertMutasiPengirim.executeUpdate();

            // Simpan mutasi untuk penerima
            double saldoPenerima = rsPenerima.getDouble("saldo");
            pstmtInsertMutasiPenerima = con1.prepareStatement(sqlInsertMutasiPenerima);
            pstmtInsertMutasiPenerima.setString(1, noRekeningPengirim);
            pstmtInsertMutasiPenerima.setString(2, noRekeningTujuan);
            pstmtInsertMutasiPenerima.setDouble(3, saldoPenerima - jumlahTransfer);
            pstmtInsertMutasiPenerima.setDouble(4, saldoPenerima);
            pstmtInsertMutasiPenerima.setString(5, "Transfer");
            pstmtInsertMutasiPenerima.executeUpdate();

            // Commit transaksi
            con1.commit();
            transferBerhasil = true;
            JOptionPane.showMessageDialog(this, "Transfer berhasil!");
        } catch (SQLException e) {
            try {
                if (con1 != null) {
                    con1.rollback();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Transfer gagal. Error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Pastikan koneksi dan resource lainnya ditutup setelah digunakan
            try {
                if (rsPengirim != null) {
                    rsPengirim.close();
                }
                if (rsPenerima != null) {
                    rsPenerima.close();
                }
                if (pstmtPengirim != null) {
                    pstmtPengirim.close();
                }
                if (pstmtPenerima != null) {
                    pstmtPenerima.close();
                }
                if (pstmtUpdateSaldoPengirim != null) {
                    pstmtUpdateSaldoPengirim.close();
                }
                if (pstmtUpdateSaldoPenerima != null) {
                    pstmtUpdateSaldoPenerima.close();
                }
                if (pstmtInsertMutasiPengirim != null) {
                    pstmtInsertMutasiPengirim.close();
                }
                if (pstmtInsertMutasiPenerima != null) {
                    pstmtInsertMutasiPenerima.close();
                }
                if (con1 != null) {
                    con1.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return transferBerhasil;
    }

    private String getNamaPenerima(String noRekeningTujuan) {
        String namaPenerima = null;
        String sql = "SELECT nama_lengkap FROM user WHERE nomor_rekening = ?";

        Connection con1 = null;  // Koneksi ke database
        PreparedStatement pstmt = null;  // PreparedStatement untuk query
        ResultSet rs = null;  // ResultSet untuk mengambil data

        try {
            // Membuat koneksi ke database menggunakan DriverManager
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_bank", "root", "");

            pstmt = con1.prepareStatement(sql);
            pstmt.setString(1, noRekeningTujuan);  // Set nomor rekening tujuan sebagai parameter

            rs = pstmt.executeQuery();

            if (rs.next()) {
                namaPenerima = rs.getString("nama_lengkap");  // Ambil nama penerima
            }
        } catch (SQLException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Status: Terjadi kesalahan saat mengecek nama penerima.");
            e.printStackTrace();
        } finally {
            // Pastikan koneksi dan resource lainnya ditutup setelah digunakan
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (con1 != null) {
                    con1.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return namaPenerima;
    }

    public double getSaldoPengirim(String noRekeningPengirim) {
        String sql = "SELECT saldo FROM user WHERE nomor_rekening = ?";
        double saldo = 0.0;

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Memuat driver dan membuat koneksi ke database
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_bank", "root", "");

            // Menyiapkan statement
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, noRekeningPengirim);

            // Mengeksekusi query
            rs = pstmt.executeQuery();
            if (rs.next()) {
                saldo = rs.getDouble("saldo"); // Sesuaikan nama kolom
            }
        } catch (Exception e) {
            e.printStackTrace(); // Menangkap semua pengecualian
        } finally {
            // Menutup semua resource
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return saldo;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String noRekeningTujuan = jTextFieldNoRekTujuan.getText();
        String jumlahStr = jTextFieldJumlahTransfer.getText();

// Validasi input
        if (noRekeningTujuan.isEmpty() || jumlahStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Status: Nomor rekening atau jumlah transfer kosong!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double jumlahTransfer;
        try {
            jumlahTransfer = Double.parseDouble(jumlahStr);
            if (jumlahTransfer <= 0) {
                JOptionPane.showMessageDialog(null, "Status: Jumlah transfer harus lebih besar dari 0!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Status: Jumlah transfer tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

// Cek nama penerima berdasarkan nomor rekening tujuan
        String namaPenerima = getNamaPenerima(noRekeningTujuan);
        if (namaPenerima == null) {
            JOptionPane.showMessageDialog(null, "Status: Nomor rekening penerima tidak ditemukan.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

// Tampilkan dialog konfirmasi sebelum transfer
        int confirm = JOptionPane.showConfirmDialog(null,
                "Apakah Anda yakin ingin mengirimkan Rp " + jumlahTransfer + " ke " + namaPenerima + "?",
                "Konfirmasi Transfer", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Jika pengguna mengonfirmasi transfer
            if (transferUang(noRekeningPengirim, noRekeningTujuan, jumlahTransfer)) {
                // Status sudah diatur di method transferUang
                jTextFieldNoRekTujuan.setText(""); // Bersihkan field nomor rekening tujuan
                jTextFieldJumlahTransfer.setText(""); // Bersihkan field jumlah transfer
                double saldoPengirim = getSaldoPengirim(noRekeningPengirim); // Function to get the sender's balance
                jLabelSaldoSaatIni.setText("Rp " + saldoPengirim);
            }
        } else {
            // Jika pengguna membatalkan transfer
            JOptionPane.showMessageDialog(null, "Status: Transfer dibatalkan.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(transfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new transfer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelSaldoSaatIni;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldJumlahTransfer;
    private javax.swing.JTextField jTextFieldNoRekTujuan;
    // End of variables declaration//GEN-END:variables
}
